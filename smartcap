#!/bin/bash

# 2019-01-03 maxcode@maxwellspangler.com

# Review and capture S.M.A.R.T. health attributes and other information
# about a storage device

VERSION="1.0.4"
VERSION_DATE="2019-01-03"

# Output for smartctl -x
TMP_FILE_X="/tmp/capture-smartctlx.$$"

# Output for smartctl -A
TMP_FILE_A="/tmp/capture-smartctla.$$"

OUTDIR=/home/${USERNAME}/smartlogs
if [[ ! -d $OUTDIR ]]
then
  mkdir $OUTDIR
fi

function usage {
  echo
  echo "capture-smartctl <BLOCK-DEVICE>"
  echo
  echo "Ex: capture-smartctl /dev/sdb"
  echo
  echo "Available devices:"
  if [[ $(whereis lsscsi | awk '{print $2}') != "" ]]
  then
    lsscsi
  fi
}

# Remove extra spaces from raw text
function clean_text {
  echo $1 | sed -e 's/^[ \t]*//' | sed -e 's/[ \t]*//' |  sed 's/ /-/g' | sed 's#/#_#g'
}

if [[ $(id -u) != 0 ]]
then
  echo "Error: You must run this program as root or via 'sudo smartcap'"
  exit 1
fi

# Require a block device as a parameter
BLOCK_DEVICE=${1:-"_null"}

if [[ $BLOCK_DEVICE == "_null" ]]
then
  echo "Error: You need to specify a block device to inspect."
  echo
  usage
  exit 1
else

  if [[ ! -b $BLOCK_DEVICE ]]
  then
    echo "Error: Requested device $BLOCK_DEVICE is not a block device"
    usage
    exit 1
  else
    smartctl -x $BLOCK_DEVICE > $TMP_FILE_X
    smartctl -A $BLOCK_DEVICE > $TMP_FILE_A

    # Reported via stdout and used in log file name generation
    FAMILY=$(cat $TMP_FILE_X | grep -E '^Model Family:' | awk -F ":" '{print $2}')
    DEVICE=$(cat $TMP_FILE_X | grep -E '^Device Model:' | awk -F ":" '{print $2}')
    SERIAL=$(cat $TMP_FILE_X | grep -E '^Serial Number:' | awk -F ":" '{print $2}')
    FORMFACTOR=$(cat $TMP_FILE_X | grep -E '^Form Factor:' | awk -F ":" '{print $2}')

    FAM=$(clean_text "$FAMILY")
    DEV=$(clean_text "$DEVICE")
    SER=$(clean_text "$SERIAL")
    FORM=$(clean_text "$FORMFACTOR")

    A5=$(cat $TMP_FILE_A | grep -E '^  5 ' | awk '{print $10}')
    A9=$(cat $TMP_FILE_A | grep -E '^  9 ' | awk '{print $10}')
    A187=$(cat $TMP_FILE_A | grep -E '^187 ' | awk '{print $10}')
    A197=$(cat $TMP_FILE_A | grep -E '^197 ' | awk '{print $10}')
    A198=$(cat $TMP_FILE_A | grep -E '^198 ' | awk '{print $10}')

    DATE=$(date +"%Y-%m%d")

    #
    # Reporting starts here
    #

    echo "smartcap  $VERSION ($VERSION_DATE)"
    echo

    # Not all drives report Form Factor information
    if [[ $FORM != "" ]]
    then
      echo "Drive is a $FORM size $FAM model $DEV"
    else
      echo "Drive is a $FAM model $DEV"
    fi

    echo "Serial $SER"
    echo

    # Show important attributes which are helpful but don't indicate failure
    cat $TMP_FILE_A | grep -E "^ID|^  4"
    cat $TMP_FILE_A | grep -E "^  5"
    if [[ $A5 -gt 0 ]]
    then
      echo "^^^^^ INFO Attribute 5 Reallocated_Sector_Ct > 0 - Review"
      echo
    fi

    cat $TMP_FILE_A | grep -E "^  9"
    echo -n $POWER_ON_HOURS
    POWER_ON_DAYS=$(($A9/24))
    echo "     $POWER_ON_DAYS days"
    echo

    # Now show attributes which might indicate impending drive failure
    cat $TMP_FILE_A | grep -E "^ID"

    cat $TMP_FILE_A | grep -E "^187"
    if [[ $A187 -gt 0 ]]
    then
      echo "^^^^^ WARNING Attribute 187 Reported Uncorrectable > 0 - DRIVE UNHEALTHY"
      echo
    fi

    cat $TMP_FILE_A | grep -E "^196"
    if [[ $A196 -gt 0 ]]
    then
      echo "^^^^^ WARNING Attribute 196 Reallocated_Event_Count > 0 - REVIEW ALL STATS"
      echo
    fi

    cat $TMP_FILE_A | grep -E "^197"
    if [[ $A197 -gt 0 ]]
    then
      echo "^^^^^ WARNING Attribute 197 Pending_Sector_Ct > 0 - SCRUBBING RECOMMENDED"
      echo
    fi

    cat $TMP_FILE_A | grep -E "^198"
    if [[ $A198 -gt 0 ]]
    then
      echo "^^^^^ WARNING Attribute 198 Offline_Uncorrectable > 0 - DRIVE UNHEALTHY"
      echo
    fi

    if [[ $FORM != "" ]]
    then
      OUTFILE="$OUTDIR/$FAM.$DEV.$SER.$FORM.$DATE"
    else
      OUTFILE="$OUTDIR/$FAM.$DEV.$SER.$DATE"
    fi

    # Construct a single output file
    cat $TMP_FILE_X > $OUTFILE
    echo >> $OUTFILE
    cat $TMP_FILE_A >> $OUTFILE

    chown $USERNAME $OUTFILE

    echo
    echo "Logged S.M.A.R.T. data to $OUTFILE"

    rm $TMP_FILE_X $TMP_FILE_A

    echo
    read -p "View logs? [Y/n]" YESNO
    if [[ $YESNO == "y" || $YESNO == "Y" || $YESNO == "yes" ]]
    then
      less $OUTFILE
    fi

  fi
fi
